from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import re
from sympy import Eq, solve, symbols, sympify, Add, Mul
from sympy.parsing.sympy_parser import parse_expr

# ¬°IMPORTANTE! NUNCA expongas tu clave de API directamente en c√≥digo de producci√≥n.
# Para este ejemplo, la mantendremos, pero en un entorno real, usa variables de entorno.
OPENAI_API_KEY = "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"

app = Flask(__name__)
CORS(app)

# Funci√≥n para detectar si una expresi√≥n es una operaci√≥n matem√°tica simple que se puede resolver localmente.
def is_simple_math_problem(expresion):
    """
    Verifica si una expresi√≥n de texto es un problema matem√°tico simple (ej. "5+3" o "2x=10").
    Esto nos permite resolverlo localmente sin llamar a la API de OpenAI,
    haciendo la respuesta mucho m√°s r√°pida.
    """
    # Expresiones de √°lgebra b√°sica como "2x+5=10"
    if '=' in expresion:
        # Verifica que la expresi√≥n contenga al menos una variable com√∫n (x, y, z)
        return re.search(r'[xyz]', expresion, re.IGNORECASE) is not None
    
    # Operaciones aritm√©ticas simples (ej. "5 + 3", "20 / 4")
    # Usa una expresi√≥n regular para detectar n√∫meros y operadores.
    # Evita que frases como "cuanto es el doble de 5" se detecten como simples.
    arithmetic_pattern = r'^\s*[-+]?\d*\.?\d+(?:\s*[-+*/]\s*[-+]?\d*\.?\d+)*\s*$'
    if re.match(arithmetic_pattern, expresion):
        return True
    
    return False

def solve_with_sympy(expresion):
    """
    Resuelve una ecuaci√≥n o una operaci√≥n aritm√©tica usando la librer√≠a SymPy.
    """
    try:
        # Si es una ecuaci√≥n
        if '=' in expresion:
            x = symbols('x y z')
            lado_izq, lado_der = expresion.split('=')
            
            # Reemplaza 'x' por la variable simb√≥lica para evitar conflictos.
            expresion_simbolica = Eq(parse_expr(lado_izq), parse_expr(lado_der))
            
            # Encuentra las variables de la ecuaci√≥n
            variables = list(expresion_simbolica.free_symbols)
            
            if not variables:
                return "No se encontraron variables para resolver la ecuaci√≥n."

            solucion = solve(expresion_simbolica, variables[0])

            if solucion:
                return f"Este es un problema de √°lgebra.\n\nSe resuelve la ecuaci√≥n: ${expresion}$\n\nDespejando la variable se obtiene:\n$ {variables[0]} = {solucion[0]} $"
            else:
                return "La ecuaci√≥n no tiene una soluci√≥n obvia o es demasiado compleja."

        # Si es una operaci√≥n aritm√©tica simple
        else:
            expresion_simbolica = sympify(expresion)
            resultado = expresion_simbolica.evalf()
            
            # Convierte a entero si es un n√∫mero entero.
            # Esta es la parte modificada para solucionar el problema del 4.000000
            if resultado.is_integer():
                resultado = int(resultado)
                
            return f"Este es un problema de aritm√©tica.\n\nEl resultado de la operaci√≥n ${expresion}$ es: ${resultado}$"
    except Exception as e:
        # Devuelve None si no puede resolverlo, para que el c√≥digo principal
        # recurra a la API de OpenAI
        print(f"Error al resolver con SymPy: {e}")
        return None

@app.route('/api/resolver', methods=['POST'])
def resolver():
    data = request.get_json()
    expresion_original = data.get('expresion', '').strip()
    expresion_lower = expresion_original.lower()

    if not expresion_original:
        return jsonify({
            "explicacion": "‚ùå No se recibi√≥ ning√∫n mensaje. Por favor, escribe algo para que pueda ayudarte."
        })
    
    # --- L√ìGICA DE SALUDOS DIRECTOS (se mantiene para respuestas r√°pidas) ---
    greetings = ["hola", "qu√© tal", "buenos d√≠as", "buenas tardes", "buenas noches"]
    for greeting_phrase in greetings:
        if expresion_lower.startswith(greeting_phrase):
            return jsonify({
                "explicacion": "¬°Hola! üëã Soy un asistente dise√±ado para ayudarte con problemas matem√°ticos y analizar im√°genes. ¬øEn qu√© puedo asistirte hoy?"
            })
    # --- FIN L√ìGICA DE SALUDOS DIRECTOS ---

    # --- NUEVA L√ìGICA DE RESOLUCI√ìN LOCAL R√ÅPIDA ---
    if is_simple_math_problem(expresion_original):
        explicacion_local = solve_with_sympy(expresion_original)
        if explicacion_local:
            return jsonify({"explicacion": explicacion_local})
    # --- FIN L√ìGICA DE RESOLUCI√ìN LOCAL R√ÅPIDA ---

    messages_content = []
    
    # Define el comportamiento general del asistente
    system_instruction = (
        "Eres Match.IA, un asistente amigable y √∫til especializado en matem√°ticas. "
        "Tu objetivo principal es resolver problemas matem√°ticos y analizar im√°genes que contengan ecuaciones o ejercicios. "
        "Cuando recibas una pregunta, por favor, sigue estas reglas estrictas:\n\n"
        "1.  **Clasificaci√≥n de la Pregunta:** Determina si la pregunta est√° relacionada con matem√°ticas (√°lgebra, geometr√≠a, c√°lculo, aritm√©tica, etc.) o si es una pregunta general/no matem√°tica (saludo que no fue detectado, chiste, informaci√≥n hist√≥rica, etc.).\n"
        "2.  **Respuesta No Matem√°tica:** Si la pregunta NO es un problema matem√°tico, responde √öNICAMENTE con el siguiente mensaje: "
        "'Lo siento, mi especialidad son las matem√°ticas y el an√°lisis de problemas en im√°genes. No puedo ayudarte con preguntas no relacionadas con las matem√°ticas. ¬°Preg√∫ntame un ejercicio y lo resolveremos!'. "
        "No intentes responder a la pregunta general.\n"
        "3.  **Detecci√≥n de Tipo de Ejercicio (Matem√°tico):** Si la pregunta ES un problema matem√°tico, primero identifica y menciona claramente el tipo de ejercicio (ej. 'Este es un problema de √°lgebra lineal', 'Este es un ejercicio de c√°lculo integral', 'Parece ser un problema de geometr√≠a', 'Este es un problema verbal de aritm√©tica').\n"
        "4.  **Resoluci√≥n Paso a Paso:** Despu√©s de identificar el tipo, procede a resolver el ejercicio matem√°tico paso a paso, explicando cada parte claramente. Utiliza formato LaTeX ($...$) para todas las expresiones matem√°ticas y ecuaciones para una mejor legibilidad.\n"
        "5.  **An√°lisis de Imagen:** Si se proporciona una imagen, conc√©ntrate en extraer y resolver el problema matem√°tico de la imagen. Si hay texto adicional del usuario con la imagen, √∫salo como contexto para entender mejor el problema de la imagen.\n"
        "6.  **Claridad:** S√© conciso y directo en tus explicaciones."
    )

    messages_content.append({"type": "text", "text": system_instruction})

    # Detectar si la expresi√≥n original es una URL de imagen (sensible a may√∫sculas)
    if expresion_original.startswith('http') and \
        any(ext in expresion_original for ext in ['.jpg', '.png', '.jpeg', '.gif']):
        
        # Separar la URL del posible texto adicional del usuario
        parts = expresion_original.split(' ', 1) 
        image_url = parts[0]
        user_text_context = parts[1] if len(parts) > 1 else "" 

        messages_content.append({
            "type": "image_url",
            "image_url": {
                "url": image_url
            }
        })
        # Incluye el contexto del usuario en la parte de texto
        messages_content.append({
            "type": "text",
            "text": f"Aqu√≠ est√° la imagen. Mi pregunta sobre la imagen es: '{user_text_context}'"
        })
    else:
        # Si es solo texto y no fue detectado como un saludo directo.
        messages_content.append({
            "type": "text",
            "text": expresion_original
        })

    openai_url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "gpt-4o",
        "messages": [{"role": "user", "content": messages_content}],
        "max_tokens": 500,
        "temperature": 0.5
    }

    try:
        response = requests.post(openai_url, json=body, headers=headers)
        response.raise_for_status() 
        respuesta = response.json()
        explicacion = respuesta['choices'][0]['message']['content'].strip()

        return jsonify({
            "explicacion": explicacion
        })

    except requests.exceptions.HTTPError as errh:
        print(f"Error HTTP al conectar con OpenAI: {errh}")
        return jsonify({
            "explicacion": f"‚ùå Error HTTP al conectar con OpenAI: {str(errh)}. Aseg√∫rate de que tu clave API sea v√°lida y tengas conexi√≥n a internet."
        })
    except requests.exceptions.ConnectionError as errc:
        print(f"Error de Conexi√≥n al conectar con OpenAI: {errc}")
        return jsonify({
            "explicacion": f"‚ùå Error de conexi√≥n al intentar comunicarse con OpenAI: {str(errc)}. Revisa tu conexi√≥n a internet."
        })
    except requests.exceptions.Timeout as errt:
        print(f"Tiempo de espera agotado al conectar con OpenAI: {errt}")
        return jsonify({
            "explicacion": f"‚ùå La conexi√≥n a OpenAI tard√≥ demasiado. Por favor, int√©ntalo de nuevo: {str(errt)}"
        })
    except requests.exceptions.RequestException as err:
        print(f"Error general de solicitud con OpenAI: {err}")
        return jsonify({
            "explicacion": f"‚ùå Ocurri√≥ un error inesperado al procesar tu solicitud con OpenAI: {str(err)}"
        })
    except Exception as e:
        print(f"Error inesperado en el servidor: {e}")
        return jsonify({
            "explicacion": f"‚ùå Hubo un problema al procesar la solicitud. Detalles: {str(e)}"
        })

# La ruta /resolver-ecuacion ya no es necesaria, ya que la l√≥gica fue integrada.
# Puedes eliminarla si lo deseas.

if __name__ == '__main__':
    app.run(debug=True)